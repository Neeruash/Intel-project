import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, Dataset
import torchvision.transforms as T
from skimage.metrics import structural_similarity as ssim
from PIL import Image
import os
import time

# ====== Dataset Class ======
class ImageDataset(Dataset):
    def __init__(self, folder):
        self.folder = folder
        self.images = os.listdir(folder)
        self.transform = T.Compose([
            T.Resize((128, 128)),
            T.ToTensor()
        ])

    def __len__(self):
        return len(self.images)

    def __getitem__(self, idx):
        img_path = os.path.join(self.folder, self.images[idx])
        img = Image.open(img_path).convert("RGB")
        low_res = img.resize((64, 64), Image.BICUBIC).resize((128, 128), Image.BICUBIC)
        return self.transform(low_res), self.transform(img)

# ====== Teacher Model ======
class TeacherModel(nn.Module):
    def __init__(self):
        super(TeacherModel, self).__init__()
        self.net = nn.Sequential(
            nn.Conv2d(3, 64, 3, padding=1),
            nn.ReLU(),
            nn.Conv2d(64, 64, 3, padding=1),
            nn.ReLU(),
            nn.Conv2d(64, 3, 3, padding=1)
        )

    def forward(self, x):
        return self.net(x)

# ====== Student Model ======
class StudentModel(nn.Module):
    def __init__(self):
        super(StudentModel, self).__init__()
        self.net = nn.Sequential(
            nn.Conv2d(3, 16, 3, padding=1),
            nn.ReLU(),
            nn.Conv2d(16, 16, 3, padding=1),
            nn.ReLU(),
            nn.Conv2d(16, 3, 3, padding=1)
        )

    def forward(self, x):
        return self.net(x)

# ====== SSIM Metric ======
def calculate_ssim(img1, img2):
    img1 = img1.squeeze().permute(1, 2, 0).detach().cpu().numpy()
    img2 = img2.squeeze().permute(1, 2, 0).detach().cpu().numpy()
    return ssim(img1, img2, multichannel=True, data_range=1.0)

# ====== Training Function ======
def train_model():
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    teacher = TeacherModel().to(device)
    student = StudentModel().to(device)

    for param in teacher.parameters():
        param.requires_grad = False

    optimizer = optim.Adam(student.parameters(), lr=1e-4)
    criterion = nn.MSELoss()

    dataset = ImageDataset("data/train")
    loader = DataLoader(dataset, batch_size=8, shuffle=True)

    for epoch in range(5):
        total_loss = 0
        for low_res, high_res in loader:
            low_res, high_res = low_res.to(device), high_res.to(device)

            with torch.no_grad():
                teacher_output = teacher(low_res)

            student_output = student(low_res)
            loss = criterion(student_output, teacher_output)

            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

            total_loss += loss.item()

        print(f"Epoch {epoch+1}: Loss = {total_loss/len(loader):.4f}")

    torch.save(student.state_dict(), "student_model.pth")

# ====== Evaluation Function ======
def evaluate_model():
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    student = StudentModel().to(device)
    student.load_state_dict(torch.load("student_model.pth"))
    student.eval()

    transform = T.Compose([T.Resize((128, 128)), T.ToTensor()])
    test_folder = "data/test"
    files = os.listdir(test_folder)

    ssim_scores = []
    fps_times = []

    for f in files:
        img = Image.open(os.path.join(test_folder, f)).convert("RGB")
        low_res = img.resize((64, 64), Image.BICUBIC).resize((128, 128), Image.BICUBIC)

        input_tensor = transform(low_res).unsqueeze(0).to(device)
        target_tensor = transform(img).unsqueeze(0).to(device)

        start_time = time.time()
        with torch.no_grad():
            output = student(input_tensor)
        fps_times.append(time.time() - start_time)

        score = calculate_ssim(output[0], target_tensor[0])
        ssim_scores.append(score)

    avg_ssim = sum(ssim_scores) / len(ssim_scores)
    avg_fps = 1.0 / (sum(fps_times) / len(fps_times))

    print(f"\nAverage SSIM: {avg_ssim:.4f}")
    print(f"Estimated FPS: {avg_fps:.2f}")

# ====== Run Everything ======
if __name__ == "__main__":
    print("Training student model with knowledge distillation...")
    train_model()

    print("\nEvaluating student model...")
    evaluate_model()
